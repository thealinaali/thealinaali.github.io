import React, { useState, useEffect } from 'react';
import { AlertCircle } from 'lucide-react';
import { Alert, AlertDescription } from '@/components/ui/alert';

// Kazakh word list - you'll want to expand this
const WORDS = [
  'ДҰРЫС', 'ҚАТТЫ', 'ҚАСЫҚ', 'СЕНІМ', 'ҚОҢЫР',
  'БАЛЫҚ', 'ЖАУАП', 'КӨМІР', 'БАҚЫТ'
];

const WORD_LENGTH = 5;
const MAX_ATTEMPTS = 6;

const KazakhWordle = () => {
  const [targetWord, setTargetWord] = useState('');
  const [guesses, setGuesses] = useState(Array(MAX_ATTEMPTS).fill(''));
  const [currentGuess, setCurrentGuess] = useState('');
  const [currentAttempt, setCurrentAttempt] = useState(0);
  const [gameStatus, setGameStatus] = useState('playing'); // 'playing', 'won', 'lost'
  const [message, setMessage] = useState('');

  useEffect(() => {
    // Select a random word on component mount
    const randomWord = WORDS[Math.floor(Math.random() * WORDS.length)];
    setTargetWord(randomWord);
  }, []);

  const handleKeyPress = (event) => {
    if (gameStatus !== 'playing') return;

    const key = event.key.toUpperCase();
    
    if (key === 'ENTER') {
      if (currentGuess.length !== WORD_LENGTH) {
        setMessage('Сөз толық емес!'); // Word is not complete!
        return;
      }
      
      // Add guess to the list
      const newGuesses = [...guesses];
      newGuesses[currentAttempt] = currentGuess;
      setGuesses(newGuesses);
      
      // Check if won
      if (currentGuess === targetWord) {
        setGameStatus('won');
        setMessage('Жеңіске жеттіңіз!'); // You won!
        return;
      }
      
      // Check if lost
      if (currentAttempt === MAX_ATTEMPTS - 1) {
        setGameStatus('lost');
        setMessage(`Ойын бітті! Сөз: ${targetWord}`); // Game over! The word was:
        return;
      }
      
      setCurrentAttempt(currentAttempt + 1);
      setCurrentGuess('');
    } else if (key === 'BACKSPACE') {
      setCurrentGuess(prev => prev.slice(0, -1));
    } else if (/^[ӘІҢҒҮҰҚӨҺАБВГДЕЖЗИЙКЛМНОПРСТУФХЦЧШЩЫЭЮЯ]$/.test(key) && currentGuess.length < WORD_LENGTH) {
      setCurrentGuess(prev => prev + key);
    }
  };

  useEffect(() => {
    window.addEventListener('keydown', handleKeyPress);
    return () => window.removeEventListener('keydown', handleKeyPress);
  }, [currentGuess, currentAttempt, gameStatus]);

  const getLetterColor = (letter, index, guessIndex) => {
    if (guessIndex >= currentAttempt && !(guessIndex === currentAttempt && letter)) return 'bg-gray-200';
    if (!letter) return 'bg-gray-200';
    
    if (targetWord[index] === letter) {
      return 'bg-green-500 text-white';
    }
    if (targetWord.includes(letter)) {
      return 'bg-yellow-500 text-white';
    }
    return 'bg-gray-500 text-white';
  };

  return (
    <div className="max-w-lg mx-auto p-4 text-center">
      <h1 className="text-3xl font-bold mb-8">Қазақша Wordle</h1>
      
      {message && (
        <Alert className="mb-4">
          <AlertCircle className="h-4 w-4" />
          <AlertDescription>{message}</AlertDescription>
        </Alert>
      )}

      <div className="grid gap-2 mb-4">
        {Array(MAX_ATTEMPTS).fill(0).map((_, attemptIndex) => (
          <div key={attemptIndex} className="flex justify-center gap-2">
            {Array(WORD_LENGTH).fill(0).map((_, letterIndex) => {
              const letter = attemptIndex === currentAttempt 
                ? currentGuess[letterIndex] 
                : guesses[attemptIndex][letterIndex];
              
              return (
                <div
                  key={letterIndex}
                  className={`w-12 h-12 border-2 flex items-center justify-center font-bold text-xl ${getLetterColor(letter, letterIndex, attemptIndex)}`}
                >
                  {letter}
                </div>
              );
            })}
          </div>
        ))}
      </div>

      <div className="mt-8">
        <p className="text-sm text-gray-600">
          Пернетақтаны қолданып сөзді енгізіңіз
        </p>
      </div>
    </div>
  );
};

export default KazakhWordle;
